# Ruby CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-ruby/ for more details
#
version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
      - image: circleci/ruby:2.5.1-node
        environment:
          BUNDLER_VERSION: 2.0.1
          PGHOST: 127.0.0.1
          PGUSER: omer.katzir
          RAILS_ENV: test

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      - image: circleci/postgres:9.4
        environment:
          POSTGRES_USER: omer.katzir
          POSTGRES_DB: we_eat_test
          POSTGRES_PASSWORD: ""

    working_directory: ~/repo

    environment:
      TEST_RESULTS: /tmp/test-results

    steps:
      - checkout
      - run: mkdir -p /tmp/test-results

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "Gemfile.lock" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run:
          name: upgrade bundler
          command: |
            gem install bundler -v 2.0.1

      - run:
          name: install dependencies
          command: |
            bundle install --jobs=4 --retry=3 --path vendor/bundle

      - save_cache:
          paths:
            - ./vendor/bundle
          key: v1-dependencies-{{ checksum "Gemfile.lock" }}

      - run:
          name: run rubocop
          command: |
            bundle exec rubocop

      - run:
          name: Wait for DB
          command: dockerize -wait tcp://localhost:5432 -timeout 1m

      - run:
          name: Database setup
          command: bin/rails db:schema:load --trace

      - run:
          name: run espec
          command: |
            bundle exec rspec

      # Save artifacts
      - store_test_results:
          path: /tmp/test-results
          steps:
            - checkout
            - run: bundle check --path=vendor/bundle || bundle install --path=vendor/bundle --jobs=4 --retry=3
            - run: mkdir ~/rspec
            - run:
                command: bundle exec rspec --format progress --format RspecJunitFormatter -o ~/rspec/rspec.xml
                when: always
            - store_test_results:
                path: ~/rspec

